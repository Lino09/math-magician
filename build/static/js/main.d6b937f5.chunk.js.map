{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","initial","total","Calculator","useState","obj","setObj","onButtonPress","btnInfo","newObj","buttonName","next","match","includes","parseFloat","calculate","className","onClick","type","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6b937f5.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown opera\ntion '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\n\nconst initial = {\n  total: '0',\n};\n\nconst Calculator = () => {\n  const [obj, setObj] = useState(initial);\n  const onButtonPress = (obj, btnInfo) => {\n    const newObj = calculate(obj, btnInfo);\n    if (!newObj.next && !newObj.total) {\n      newObj.next = '0';\n    }\n    setObj(newObj);\n  };\n  return (\n    <div className=\"calc\">\n      <p className=\"calc-screen\">\n        {obj.total}\n        {obj.operation}\n        {obj.next}\n      </p>\n      <button onClick={() => onButtonPress(obj, 'AC')} type=\"button\">AC</button>\n      <button onClick={() => onButtonPress(obj, '+/-')} type=\"button\">+/-</button>\n      <button onClick={() => onButtonPress(obj, '%')} type=\"button\" className=\"\">%</button>\n      <button onClick={() => onButtonPress(obj, 'รท')} type=\"button\" className=\"calc-operation\">รท</button>\n      <button onClick={() => onButtonPress(obj, '7')} type=\"button\" className=\"calc-num\">7</button>\n      <button onClick={() => onButtonPress(obj, '8')} type=\"button\" className=\"calc-num\">8</button>\n      <button onClick={() => onButtonPress(obj, '9')} type=\"button\" className=\"calc-num\">9</button>\n      <button onClick={() => onButtonPress(obj, 'x')} type=\"button\" className=\"calc-operation\">x</button>\n      <button onClick={() => onButtonPress(obj, '4')} type=\"button\" className=\"calc-num\">4</button>\n      <button onClick={() => onButtonPress(obj, '5')} type=\"button\" className=\"calc-num\">5</button>\n      <button onClick={() => onButtonPress(obj, '6')} type=\"button\" className=\"calc-num\">6</button>\n      <button onClick={() => onButtonPress(obj, '-')} type=\"button\" className=\"calc-operation\">-</button>\n      <button onClick={() => onButtonPress(obj, '1')} type=\"button\" className=\"calc-num\">1</button>\n      <button onClick={() => onButtonPress(obj, '2')} type=\"button\" className=\"calc-num\">2</button>\n      <button onClick={() => onButtonPress(obj, '3')} type=\"button\" className=\"calc-num\">3</button>\n      <button onClick={() => onButtonPress(obj, '+')} type=\"button\" className=\"calc-operation\">+</button>\n      <button onClick={() => onButtonPress(obj, '0')} type=\"button\" className=\"calc-num calc-zero\">0</button>\n      <button onClick={() => onButtonPress(obj, '.')} type=\"button\">.</button>\n      <button onClick={() => onButtonPress(obj, '=')} type=\"button\" className=\"calc-operation\">=</button>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import './App.css';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Math Magicians</h1>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}